import socket
import random

def rand_mac():
    return "%02x%02x%02x%02x%02x%02x" % (
            random.randint(0, 255),
            random.randint(0, 255),
            random.randint(0, 255),
            random.randint(0, 255),
            random.randint(0, 255),
            random.randint(0, 255)
        )
        
class DHCPDiscover:
    def buildPacket(self):
        mac = rand_mac().encode('utf-8')
        print(mac)
        mac = b'\x8c\x0c\x5c\x87\x78\x75'
        #user = 'Ciro:PHP-Merda'.encode("utf-16")
        user = b'\x43\x00\x69\x00\x72\x00\x6f\x00\x3a\x00\x50\x00\x48\x00\x50\x00\x2d\x00\x4d\x00\x65\x00\x72\x00\x64\x00\x61\x00'
        
        packet = b'\xff\xff\xff\xff\xff\xff'
        packet += mac + b'\x08\x00'
        packet += b'\x45\x10\x01\x58\x00\x00\x00\x00\x80\x11\x39\x86\x00\x00\x00\x00\xff\xff\xff\xff'
        packet += b'\x00\x44\x00\x43\x01\x44\x9e\x7b'
        packet += b'\x01\x01\x06\x00\x3b\xc7\x7e\x74'
        packet += b'\x00' * 20
        packet += mac + b'\x00' * 10
        packet += b'\x00' * (64 + 128)
        packet += b'\x63\x82\x53\x63\x35\x01\x01\x32\x04\xc0\xa8\x6f\x19\x0c\x1c'
        packet += user
        packet += b'\x37\x0d\x01\x1c\x02\x03\x0f\x06\x77\x0c\x2c\x2f\x1a\x79\x2a\x3d\x13\xff\x9c\x92\xf0\x88\x00\x01\x00\x01\x2c\xf7\x21\xf7'
        packet += mac + b'\xff'
        
        #return b'\xff\xff\xff\xff\xff\xff\x00\xA0\x40\x00\x00\x00\x08\x00\x45\x10\x01\x58\x00\x00\x00\x00\x80\x11\x39\x86\x00\x00\x00\x00\xff\xff\xff\xff\x00\x44\x00\x43\x01\x44\x9e\x7b\x01\x01\x06\x00\x3b\xc7\x7e\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xA0\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x63\x82\x53\x63\x35\x01\x01\x32\x04\xc0\xa8\x6f\x19\x0c\x1c\x43\x00\x69\x00\x72\x00\x6f\x00\x3a\x00\x50\x00\x48\x00\x50\x00\x2d\x00\x4d\x00\x65\x00\x72\x00\x64\x00\x61\x00\x37\x0d\x01\x1c\x02\x03\x0f\x06\x77\x0c\x2c\x2f\x1a\x79\x2a\x3d\x13\xff\x9c\x92\xf0\x88\x00\x01\x00\x01\x2c\xf7\x21\xf7\x00\xA0\x40\x00\x00\x00\xff'
        return packet

            
if __name__ == '__main__':
    #defining the socket
    dhcps = socket.socket(socket.AF_PACKET, socket.SOCK_RAW)    # build a socket raw
    
    #buiding and sending the DHCPDiscover packet
    dhcps.bind(("eno1", 0))          # bind with the interface
    discoverPacket = DHCPDiscover()     # create the packet raw
    dhcps.send(discoverPacket.buildPacket())            # send the packet

    print('DHCP Discover sent waiting for reply...\n')